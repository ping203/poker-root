/**
 * Copyright (C) 2011 Cubeia Ltd <info@cubeia.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.cubeia.firebase.server.processor.filter;

import java.util.UUID;

import org.apache.log4j.Logger;

import com.cubeia.firebase.api.action.AbstractPlayerAction;
import com.cubeia.firebase.api.action.Action;
import com.cubeia.firebase.api.action.ScheduledGameAction;
import com.cubeia.firebase.api.action.processor.ProcessorChain;
import com.cubeia.firebase.api.action.processor.ProcessorFilter;
import com.cubeia.firebase.game.table.FirebaseTable;

/**
 * This filter checks if an action has been executed upon already. It accepts
 * Firebase tables only. 
 * 
 * @author Lars J. Nilsson
 */
public class DoubleExecutionCheckFilter<T extends FirebaseTable, A extends Action> implements ProcessorFilter<T, A> {

	private final Logger log = Logger.getLogger(getClass());
	
	@Override
	public void process(A action, T data, ProcessorChain<T, A> filters) {
    	if (alreadyExecuted(action, data)) {
    		log.debug("Double execution detected for action: " + action);
    	} else {
    		filters.next(action, data);
    		storeSequence(action, data);
    	}
	}


	// --- PRIVATE METHODS --- //
	
    /*
     * If action is of the ScheduledGameAction type, check the table to 
     * make sure the action is still scheduled, otherwise we have a fail over
     * failure or really bad luck and should ignore this execution. 
     * 
     * This method must be left, as tables are scheduling on commit there's
     * a real possibility one event cancels a scheduled action when the action
     * is already queued up for executing on the table lock, here however we 
     * should be safe to check. /LJN
     */
    private boolean alreadyExecuted(A action, T table) {
		if(action instanceof ScheduledGameAction) {
			UUID id = ((ScheduledGameAction)action).getIdentifier();
			return !table.getScheduler().hasScheduledGameAction(id);
		} else if(action instanceof AbstractPlayerAction) {
		    AbstractPlayerAction gameAction = (AbstractPlayerAction)action;
            return checkActionSequence(gameAction, table);
        } else {
			return false;
		}
	}

    /*
     * Verifies that the action has not yet been executed.
     * This is possible in certain fail over scenarios and we need to check this
     * to avoid double execution of events.
     * 
     * The sequence is not generated by the client and sequences between actions
     * do not need to be sequential (i.e. incremented by one) as long as they
     * are unique within a reasonable window of actions.
     * 
     * @param action, the action to check
     * @return true if this action should be discarded (already executed)
     */
	private boolean checkActionSequence(AbstractPlayerAction action, T table) {
        if (table.getMetaData().isDoubleExecution(action)) {
            log.warn("Discarding action due to double event execution: " + action + " Id: " + action.getActionId());
            return true;
        } else {
            return false;
        }
    }
	
	/*
	 * Stores the sequence of the action to the table's last executed action property.
	 * This is needed for fail over reasons (see checkActionSequence method).
	 */
	private void storeSequence(A action, T table) {
		table.getMetaData().setLastExecuted(action);
    }
}
