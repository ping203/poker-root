<?xml version="1.0" encoding="UTF-8"?>
<beans 
  xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" 
  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task" 
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:jaxws="http://cxf.apache.org/jaxws"
  xmlns:jaxrs="http://cxf.apache.org/jaxrs"
  xmlns:cxf="http://cxf.apache.org/core"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
    http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
    http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"
  default-autowire="byName">
	
  
  <context:component-scan base-package="com.cubeia.backoffice.accounting.core"/>
  
  <bean id="accounting.transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="accounting.entityManagerFactory"/>
  </bean>
  
  <!-- 
      NOTE: We cannot use a annotation-driven transactional manager since that will take
  	  precedence over any other spring module that might include this one. So we will take
  	  the AOP route instead. This will ensure that we are using our internal transaction manager. 
   -->  
  
  <tx:advice id="accounting.txAdvice" transaction-manager="accounting.transactionManager">
    <tx:attributes>
      <tx:method name="*"/>
    </tx:attributes>
  </tx:advice>
  
  <aop:config>
    <aop:pointcut id="accounting.txPointcut" expression="execution(* com.cubeia.backoffice.accounting.core.manager.*Manager.*(..))"/>
    <aop:advisor advice-ref="accounting.txAdvice" pointcut-ref="accounting.txPointcut"/>
  </aop:config>
  
  <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

  <bean id="accounting.entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <property name="persistenceUnitName" value="accountingPersistenceUnit"/>
    <property name="dataSource" ref="accounting.dataSource"/>
    <property name="jpaVendorAdapter">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL5Dialect" />
        <property name="showSql" value="false" />
      </bean>
    </property>
  </bean>
  
  <bean id="accounting.dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" lazy-init="true">
    <property name="jndiName" value="java:comp/env/jdbc/accountingDS" />
  </bean>
  
  <task:scheduler id="accounting.scheduler" pool-size="1"/>

  <task:scheduled-tasks scheduler="accounting.scheduler">
    <!-- Check and create balance checkpoints -->
    <task:scheduled ref="accounting.accountingManager" method="checkAndCreateCheckpoints" fixed-rate="2500"/>
  </task:scheduled-tasks>

</beans>