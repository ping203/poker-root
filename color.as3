apptentive
hg --config http_proxy.host=proxy.happyelements.net:3128 clone https://bitbucket.org/cubeia/cubeia-poker
http://abduzeedo.com/game-center-layout-style-fireworks

//http://keyholesoftware.com/2013/01/14/modularization-in-typescript/
//http://cubeia.org/index.php/component/kunena/16-general-topics/1581-poker-admin-refused-to-connect-to-network
http://www.faceyourmanga.com/
//https://github.com/raph-amiard/sublime-typescript
//http://designinstruct.com/roundups/free-web-button-psd-downloads/
http://365psd.com/day/297/
//ibook
http://365psd.com/day/221/
//button
http://365psd.com/day/56/
//vcard
http://365psd.com/day/2-225/
//prifle
//http://365psd.com/day/2-313/
//advanced search
http://365psd.com/day/3-27/
//down button
http://365psd.com/day/3-48/
//Subscription Counters
http://365psd.com/day/3-188/
//v=slider
http://365psd.com/day/3-231/
//tag
http://365psd.com/day/3-239/
//ui
http://365psd.com/day/2-63/
//chat icon
http://www.easyicon.net/icondetail/29418/
http://www.easyicon.net/icondetail/27000/
http://www.easyicon.net/icondetail/31781/
//shop
http://www.psdgraphics.com/psd/small-store-icon-psd/

http://olegnax.com/1049-free-any-color-vertical-ribbon/
http://olegnax.com/904-metal-gui-elements/
http://olegnax.com/533-horizontal-ribbons/

http://www.4shared.com/photo/-Q9433di/poker_girl_flyer.html
http://www.tkshare.com/category/psd/6-Modern-Trendy-Badges-free-PSD.html
http://naldzgraphics.net/freebies/free-psd-badges/
http://bbs.duowan.com/thread-28729193-1-1.html  source paing psd
http://squirrelshaver.deviantart.com/art/Fathom-The-Elite-Saga-3-382381773
http://vinroc.deviantart.com/art/DC-Girls-Poker-Night-187513816
http://vikifloki.deviantart.com/art/Reinas-del-Poker-38783942
http://radoslawstuba.deviantart.com/art/Poker-Girl-Karola-1-317678930  --photo
http://muddassir.deviantart.com/art/Poker-Girls-112325641 --photo

http://rodrigozenteno.deviantart.com/art/CasiNO-Gano-116955414


package pirate.geom
{
  /**
	 * The DynamicMatrix class calculates and stores a matrix based on given values. 
	 * This class supports the ColorMatrixFilter and can be extended by the ColorMatrix class.
	 * @playerversion Flash 9
	 * @langversion 3.0
	 * @see fl.motion.ColorMatrix
	 * @see flash.filters.ColorMatrixFilter 
	 */
	public class DynamicMatrix {
		
		
		/**
		 * Specifies that a matrix is prepended for concatenation. 
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public static const MATRIX_ORDER_PREPEND:int = 0;
		
		
		/**
		 * Specifies that a matrix is appended for concatenation. 
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public static const MATRIX_ORDER_APPEND:int = 1;
		
		/**
		 * @private
		 */
		protected var m_width:int;
		/**
		 * @private
		 */
		protected var m_height:int;
		/**
		 * @private
		 */
		protected var m_matrix:Array;
		
		
		/**
		 * Constructs a matrix with the given number of rows and columns. 
		 * @param width Number of columns.
		 * @param height Number of rows.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public function DynamicMatrix(width:int, height:int)
		{
			Create(width, height);
		}
		
		
		/**
		 * @private
		 */
		protected function Create(width:int, height:int):void
		{
			if(width > 0 && height > 0) 
			{
				m_width = width;
				m_height = height;
				
				m_matrix = new Array(height);
				for(var i:int = 0; i < height; i++)
				{
					m_matrix[i] = new Array(width);
					for(var j:int = 0; j < height; j++)
					{
						m_matrix[i][j] = 0;
					}
				}
			}
		}
		
		
		/**
		 * @private
		 */
		protected function Destroy():void
		{
			m_matrix = null;
		}
		
		
		/**
		 * Returns the number of columns in the current matrix. 
		 * @return The number of columns.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @see #GetHeight
		 */
		public function GetWidth():Number 
		{
			return m_width;
		}
		
		
		/**
		 * Returns the number of rows in the current matrix. 
		 * @return The number of rows.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public function GetHeight():Number
		{
			return m_height;
		}
		
		
		/**
		 * Returns the value at the specified zero-based row and column in the current matrix. 
		 * @param row The row containing the value you want.
		 * @param col The column containing the value you want.
		 * @return Number The value at the specified row and column location.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public function GetValue(row:int, col:int):Number
		{
			var value:Number = 0;
			if(row >= 0 && row < m_height && col >= 0 && col <= m_width)
			{
				value = m_matrix[row][col];
			}
			
			return value;
		}
		
		
		/**
		 * Sets the value at a specified zero-based row and column in the current matrix. 
		 * @param row The row containing the value you want to set.
		 * @param col The column containing the value you want to set.
		 * @param value The number to insert into the matrix.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public function SetValue(row:int, col:int, value:Number):void
		{
			if(row >= 0 && row < m_height && col >= 0 && col <= m_width)
			{
				m_matrix[row][col] = value;
			}
		}
		
		
		/**
		 * Sets the current matrix to an identity matrix. 
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @see flash.geom.Matrix#identity()
		 */
		public function LoadIdentity():void
		{
			if(m_matrix) 
			{
				for(var i:int = 0; i < m_height; i++)
				{
					for(var j:int = 0; j < m_width; j++)
					{
						if(i == j) {
							m_matrix[i][j] = 1;
						}
						else {
							m_matrix[i][j] = 0;
						}
					}
				}
			}
		}
		
		
		/**
		 * Sets all values in the current matrix to zero. 
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public function LoadZeros():void
		{
			if(m_matrix)
			{
				for(var i:int = 0; i < m_height; i++)
				{
					for(var j:int = 0; j < m_width; j++)
					{
						m_matrix[i][j] = 0;
					}
				}
			}
		}
		
		
		/**
		 * Multiplies the current matrix with a specified matrix; and either
		 * appends or prepends the specified matrix. Use the
		 * second parameter of the <code>DynamicMatrix.Multiply()</code> method to 
		 * append or prepend the specified matrix.
		 * @param inMatrix The matrix to add to the current matrix.
		 * @param order Specifies whether to append or prepend the matrix from the
		 * <code>inMatrix</code> parameter; either <code>MATRIX_ORDER_APPEND</code>
		 * or <code>MATRIX_ORDER_PREPEND</code>.
		 * @return  A Boolean value indicating whether the multiplication succeeded (<code>true</code>) or 
		 * failed (<code>false</code>). The value is <code>false</code> if either the current matrix or
		 * specified matrix (the <code>inMatrix</code> parameter) is null, or if the order is to append and the
		 * current matrix's width is not the same as the supplied matrix's height; or if the order is to prepend
		 * and the current matrix's height is not equal to the supplied matrix's width.
		 *
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @see #MATRIX_ORDER_PREPEND
		 * @see #MATRIX_ORDER_APPEND
		 */
		public function Multiply(inMatrix:DynamicMatrix, order:int = MATRIX_ORDER_PREPEND):Boolean
		{
			if(!m_matrix || !inMatrix)
				return false;
			
			var inHeight:int = inMatrix.GetHeight();
			var inWidth:int = inMatrix.GetWidth();
			
			if(order == MATRIX_ORDER_APPEND)
			{
				//inMatrix on the left
				if(m_width != inHeight)
					return false;
				
				var result:DynamicMatrix = new DynamicMatrix(inWidth, m_height);
				for(var i:int = 0; i < m_height; i++)
				{
					for(var j:int = 0; j < inWidth; j++)
					{
						var total:Number = 0;
						for(var k:int = 0, m:int = 0; k < Math.max(m_height, inHeight) && m < Math.max(m_width, inWidth); k++, m++)
						{
							total = total + (inMatrix.GetValue(k, j) * m_matrix[i][m]);
						}
						
						result.SetValue(i, j, total);
					}
				}
				
				// destroy self and recreate with a new dimension
				Destroy();
				Create(inWidth, m_height);
				
				// assign result back to self
				for(i = 0; i < inHeight; i++)
				{
					for(j = 0; j < m_width; j++) 
					{
						m_matrix[i][j] = result.GetValue(i, j);
					}
				}
			}
				
			else {
				// inMatrix on the right
				if(m_height != inWidth)
					return false;
				
				result = new DynamicMatrix(m_width, inHeight);
				for(i = 0; i < inHeight; i++)
				{
					for(j = 0; j < m_width; j++)
					{
						total = 0;
						for(k = 0, m = 0; k < Math.max(inHeight, m_height) && m < Math.max(inWidth, m_width); k++, m++)
						{
							total = total + (m_matrix[k][j] * inMatrix.GetValue(i, m));
						}
						result.SetValue(i, j, total);
					}
				}
				
				// destroy self and recreate with a new dimension
				Destroy();
				Create(m_width, inHeight);
				
				// assign result back to self
				for(i = 0; i < inHeight; i++)
				{
					for(j = 0; j < m_width; j++)
					{
						m_matrix[i][j] = result.GetValue(i, j);
					}
				}
			}
			
			return true;
		}
		
		
		
		// Multiply matrix with a value
		/**
		 * Multiplies a number with each item in the matrix and stores the results in
		 * the current matrix.
		 * @param value A number to multiply by each item in the matrix.
		 * @return A Boolean value indicating whether the multiplication succeeded (<code>true</code>)
		 * or failed (<code>false</code>).
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public function MultiplyNumber(value:Number):Boolean
		{
			if(!m_matrix)
				return false;
			
			for(var i:int = 0; i < m_height; i++)
			{
				for(var j:int = 0; j < m_width; j++)
				{
					var total:Number = 0;
					total = m_matrix[i][j] * value;
					m_matrix[i][j] = total;
				}
			}
			
			return true;
		}
		
		
		
		// Add two matrices
		/**
		 * Adds the current matrix with a specified matrix. The 
		 * current matrix becomes the result of the addition (in other
		 * words the <code>DynamicMatrix.Add()</code> method does
		 * not create a new matrix to contain the result).
		 * @param inMatrix The matrix to add to the current matrix.
		 * @return A Boolean value indicating whether the addition succeeded (<code>true</code>)
		 * or failed (<code>false</code>). If the dimensions of the matrices are not
		 * the same, <code>DynamicMatrix.Add()</code> returns <code>false</code>.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 */
		public function Add(inMatrix:DynamicMatrix):Boolean
		{
			if(!m_matrix || !inMatrix)
				return false;
			
			var inHeight:int = inMatrix.GetHeight();
			var inWidth:int = inMatrix.GetWidth();
			
			if(m_width != inWidth || m_height != inHeight)
				return false;
			
			for(var i:int = 0; i < m_height; i++)
			{
				for(var j:int = 0; j < m_width; j++)
				{
					var total:Number = 0;
					total = m_matrix[i][j] + inMatrix.GetValue(i, j);
					m_matrix[i][j] = total;
				}
			}
			
			return true;
		}
	}
}
package pirate.geom
{
	/**
	 * The ColorMatrix class calculates and stores color matrixes based on given values. 
	 * This class extends the DynamicMatrix class and also supports the ColorMatrixFilter class.
	 * @playerversion Flash 9
	 * @langversion 3.0
	 * @see fl.motion.DynamicMatrix
	 * @see flash.filters.ColorMatrixFilter 
	 */
	public class ColorMatrix extends DynamicMatrix
	{
		// Luminance values
		
		
		/**
		 * @private
		 */
		protected static const LUMINANCER:Number = 0.3086;
		
		/**
		 * @private
		 */
		protected static const LUMINANCEG:Number = 0.6094;
		
		/**
		 * @private
		 */
		protected static const LUMINANCEB:Number = 0.0820;
		
		
		
		/**
		 * Calculates and stores color matrixes based on given values.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @see DynamicMatrix 
		 */
		public function ColorMatrix()
		{
			super(5, 5);
			LoadIdentity();
		}
		
		
		
		/**
		 * Calculates and stores a brightness matrix based on the given value.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @param value 0-255
		 */
		public function SetBrightnessMatrix(value:Number):void
		{
			if (!m_matrix)
				return;
			
			m_matrix[0][4] = value;
			m_matrix[1][4] = value;
			m_matrix[2][4] = value;
		}
		
		
		/**
		 * Calculates and stores a contrast matrix based on the given value.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @param value 0-255
		 */
		public function SetContrastMatrix(value:Number):void
		{
			if(!m_matrix)
				return;
			
			var brightness:Number = 0.5 * (127.0 - value);
			value = value / 127.0;
			
			m_matrix[0][0] = value;
			m_matrix[1][1] = value;
			m_matrix[2][2] = value;
			
			m_matrix[0][4] = brightness;
			m_matrix[1][4] = brightness;
			m_matrix[2][4] = brightness;
		}
		
		
		/**
		 * Calculates and stores a saturation matrix based on the given value.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @param value 0-255
		 */
		public function SetSaturationMatrix(value:Number):void
		{
			if(!m_matrix)
				return;
			
			var subVal:Number = 1.0 - value;
			
			var mulVal:Number = subVal * LUMINANCER;
			m_matrix[0][0] = mulVal + value;
			m_matrix[1][0] = mulVal;
			m_matrix[2][0] = mulVal;
			
			mulVal = subVal * LUMINANCEG;
			m_matrix[0][1] = mulVal;
			m_matrix[1][1] = mulVal + value;
			m_matrix[2][1] = mulVal;
			
			mulVal = subVal * LUMINANCEB;
			m_matrix[0][2] = mulVal;
			m_matrix[1][2] = mulVal;
			m_matrix[2][2] = mulVal + value;
		}		
		
		// SVG implementation of Hue Rotation
		// See http://www.w3.org/TR/SVG/filters.html#feColorMatrix
		/*
		W3C? SOFTWARE NOTICE AND LICENSE
		http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
		
		This work (and included software, documentation such as READMEs, or other related items) is being provided by the copyright holders under the following license. By obtaining, using and/or copying this work, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions.
		
		Permission to copy, modify, and distribute this software and its documentation, with or without modification, for any purpose and without fee or royalty is hereby granted, provided that you include the following on ALL copies of the software and documentation or portions thereof, including modifications:
		
		1. The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
		2. Any pre-existing intellectual property disclaimers, notices, or terms and conditions. If none exist, the W3C Software Short Notice should be included (hypertext is preferred, text is permitted) within the body of any redistributed or derivative code.
		3. Notice of any changes or modifications to the files, including the date changes were made. (We recommend you provide URIs to the location from which the code is derived.)
		
		THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
		
		COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENTATION.
		
		The name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to the software without specific, written prior permission. Title to copyright in this software and any associated documentation will at all times remain with copyright holders.
		*/
		
		/**
		 * Calculates and stores a hue matrix based on the given value.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @param value 0-255
		 */
		public function SetHueMatrix(angle:Number):void
		{
			if(!m_matrix)
				return;
			
			LoadIdentity();
			
			var baseMat:DynamicMatrix = new DynamicMatrix(3, 3);
			var cosBaseMat:DynamicMatrix = new DynamicMatrix(3, 3);
			var sinBaseMat:DynamicMatrix = new DynamicMatrix(3, 3);
			
			var cosValue:Number = Math.cos(angle);
			var sinValue:Number = Math.sin(angle);
			
			// slightly smaller luminance values from SVG
			var lumR:Number = 0.213;
			var lumG:Number = 0.715;
			var lumB:Number = 0.072;
			
			baseMat.SetValue(0, 0, lumR);
			baseMat.SetValue(1, 0, lumR);
			baseMat.SetValue(2, 0, lumR);
			
			baseMat.SetValue(0, 1, lumG);
			baseMat.SetValue(1, 1, lumG);
			baseMat.SetValue(2, 1, lumG);
			
			baseMat.SetValue(0, 2, lumB);
			baseMat.SetValue(1, 2, lumB);
			baseMat.SetValue(2, 2, lumB);
			
			cosBaseMat.SetValue(0, 0, (1 - lumR));
			cosBaseMat.SetValue(1, 0, -lumR);
			cosBaseMat.SetValue(2, 0, -lumR);
			
			cosBaseMat.SetValue(0, 1, -lumG);
			cosBaseMat.SetValue(1, 1, (1 - lumG));
			cosBaseMat.SetValue(2, 1, -lumG);
			
			cosBaseMat.SetValue(0, 2, -lumB);
			cosBaseMat.SetValue(1, 2, -lumB);
			cosBaseMat.SetValue(2, 2, (1 - lumB));
			
			cosBaseMat.MultiplyNumber(cosValue);
			
			sinBaseMat.SetValue(0, 0, -lumR);
			sinBaseMat.SetValue(1, 0, 0.143);			// not sure how this value is computed
			sinBaseMat.SetValue(2, 0, -(1 - lumR));
			
			sinBaseMat.SetValue(0, 1, -lumG);
			sinBaseMat.SetValue(1, 1, 0.140);			// not sure how this value is computed
			sinBaseMat.SetValue(2, 1, lumG);
			
			sinBaseMat.SetValue(0, 2, (1 - lumB));
			sinBaseMat.SetValue(1, 2, -0.283);			// not sure how this value is computed
			sinBaseMat.SetValue(2, 2, lumB);
			
			sinBaseMat.MultiplyNumber(sinValue);
			
			baseMat.Add(cosBaseMat);
			baseMat.Add(sinBaseMat);
			
			for(var i:int = 0; i < 3; i++)
			{
				for(var j:int = 0; j < 3; j++)
				{
					m_matrix[i][j] = baseMat.GetValue(i, j);
				}
			}
		}
		
		
		/**
		 * Calculates and returns a flat array of 20 numerical values representing the four matrixes set in this object.
		 * @playerversion Flash 9
		 * @langversion 3.0
		 * @return An array of 20 items.
		 */
		public function GetFlatArray():Array
		{
			if(!m_matrix)
				return null;
			
			var ptr:Array = new Array();
			var index:int = 0;
			for(var i:int = 0; i < 4; i++)
			{
				for(var j:int = 0; j < 5; j++)
				{
					ptr[index] = m_matrix[i][j];
					index++;
				}
			}
			
			return ptr;
		}
	}
}
final class XFormData {
	public var ox:Number;
	public var oy:Number;
	public var oz:Number;
}
